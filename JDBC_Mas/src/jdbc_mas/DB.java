package jdbc_mas;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.LinkedList;

public class DB {
    private String name;  //имя базы данных
    private LinkedList tables=new LinkedList();//список имен массивов в базе данных
    private Connection conn;
    public DB(String preambula, String n, String driver) {
        name = new String(n);
        String connectionURL = preambula + "" + name + ";create=true";
        try{   
            Class.forName( driver);
            conn = DriverManager.getConnection(connectionURL);
        } catch(Exception e){ 
            System.out.println("In function DB");
            e.printStackTrace();
        }
    }
    
    public void createMas(String name_of_massive, int number_of_rows, 
            int number_of_columns) {
        try {   
//добавляем имя массива в список имен массивов
            MasSize m=new MasSize();
            m.setName(name_of_massive);
            m.setColumns(number_of_columns);
            m.setRows(number_of_rows);
            if(!tables.contains(m)) {
                tables.add(m);
            } else  { 
                System.out.println("Massive with such name already  exists"); 
                return; 
            }  
//создание таблицы
            String createString = "CREATE TABLE " + name_of_massive 
                     + " ( NUMBER int  generated by default as identity "
                     + "(START WITH 1, INCREMENT BY 1), "
                     + "w0 DOUBLE )";
            Statement stmt = conn.createStatement();
            stmt.executeUpdate(createString);
            for(int i=1; i< number_of_columns; i++) {
//добавление столбцов в таблицу
                String stradd="ALTER TABLE " + name_of_massive
                        + "ADD" + "w" + String.valueOf(i) + " DOUBLE";
                stmt.executeUpdate(stradd);
            }
            for(int j=0;j<number_of_rows;j++) {
//добавление строк в таблицу
                String str_query = "insert into " 
                        + name_of_massive + " ( w0 )" + " values  " + "( ?)";
                PreparedStatement psInsert = conn.prepareStatement(str_query);
                psInsert.setDouble(1,0.0);
                psInsert.executeUpdate();
            }
        }
        catch (Exception e) {
            System.out.println("In function createMas");
            e.printStackTrace();
        } 
    }
    
    public void set(String name_of_massive, int row, int column, double value) {
        //изменение значения элемента с координатами row и column на значение value 
        try{
        //проверка существует ли массив с именем name_of_massive 
            MasSize m=new MasSize();
            m.setName(name_of_massive);
            m.setColumns(0);
            m.setRows(0);
            if(!tables.contains(m)) {
                System.out.println("there is no such massive");
                return; 
            }
            String str="update "+name_of_massive+
            "set"+"w"+String.valueOf(column)+"=?"+
            "where NUMBER="+String.valueOf(row+1);
            PreparedStatement psInsert = conn.prepareStatement(str);
            psInsert.setDouble(1,value);
            psInsert.executeUpdate();
        }
        catch(Exception e) {
            System.out.println("In function set");
            e.printStackTrace();
        }
    }
    
    public double get(String name_of_massive, int row, int column) {
         //получение элемента массива с координатами  row и column 
        try{
            MasSize m=new MasSize();
            m.setName(name_of_massive);
            m.setColumns(0);
            m.setRows(0);
            if(!tables.contains(m)) {
                System.out.println("there is no such massive");
                return -1; 
            }
            String str = "select " +"w" + String.valueOf(column) + "from" 
                    + name_of_massive + "where NUMBER=" + String.valueOf(row+1);
            Statement stmt2 = conn.createStatement();
            ResultSet rs = stmt2.executeQuery(str);
            rs.next();
            double d=rs.getDouble(1);
            rs.close(); 
            return d;
        } catch(Exception e) { 
            System.out.println("In function get");
            e.printStackTrace(); 
            return -1;
        }
    }
    
    public int Ncolumns(String name_of_massive) {
     //кол-во столбцов в массиве  name_of_massive
        try{
            MasSize m=new MasSize();
            m.setName(name_of_massive);
            m.setColumns(0);
            m.setRows(0);
            if(!tables.contains(m)) {
                System.out.println("there is no such massive");
                return -1;
            }
            MasSize m1 = (MasSize) tables.get(tables.indexOf(m));
            return m1.getColumns();
        } catch(Exception e) { 
            System.out.println("In function Ncolumns");
            e.printStackTrace(); 
            return -1;
        }
    }
    
    public int Nrows(String name_of_massive){
        //кол-во строк в массиве  name_of_massiv
        try{
            MasSize m=new MasSize();
            m.setName(name_of_massive);
            m.setColumns(0);
            m.setRows(0);
            if(!tables.contains(m)) {
             System.out.println("there is no such massive");
             return -1;    }
            MasSize m1= (MasSize) tables.get(tables.indexOf(m));
            return m1.getRows();
        } catch(Exception e) {
            System.out.println("In function Ncolumns");
            e.printStackTrace();
            return -1;
        }
    }
    
    public void delete_mas(String name_of_massive){
        //удаление массива name_of_massive из базы данных
        try{
            MasSize m=new MasSize();
            m.setName(name_of_massive);
            m.setColumns(0);
            m.setRows(0);
            if(!tables.contains(m)) { 
              System.out.println("there is no such massive");
              return; }
            String str="drop table "+name_of_massive;
            Statement stmt2 = conn.createStatement();
            stmt2.executeUpdate(str);
        } catch(Exception e){ 
            System.out.println("In function delete_mas");
            e.printStackTrace();
        }
    }
}